/*
Write a C program to divide the integer array into two halves using function recursion. 
Call the user-defined “divide” function recursively, with the left half of the split array being passed as an argument for that function. 
Let the recursive function to get executed until the array size becomes one. 
Count the number of iterations to reach the base condition. 
Explain the working procedure of recursive function with stack structure.
*/

#include <stdio.h>
#include <math.h>
int is_prime(int n);
int is_armstrong(int n);
int is_perfect(int n);
int main() 
{
    int n;
    printf("Enter an integer: ");
    scanf("%d", &n);
    if (is_prime(n))
    {
        printf("%d is a prime number\n", n);
    }
    else
    {
        printf("%d is not a prime number\n", n);
    }
    if (is_armstrong(n))
    {
        printf("%d is an Armstrong number\n", n);
    } 
    else 
    {
        printf("%d is not an Armstrong number\n", n);
    }
    if (is_perfect(n)) 
    {
        printf("%d is a perfect number\n", n);
    } 
    else
        printf("%d is not a perfect number\n", n
return 0;
}

int is_prime(int n) 
{
    int i;
    if (n <= 1) 
    {
        return 0;
    }
    for (i = 2; i <= sqrt(n); i++) 
    {
        if (n % i == 0) 
        {
            return 0;
        }
    }
    return 1;
}
int is_armstrong(int n) 
{
    int sum = 0, temp = n, digits = 0;
    while (temp > 0) {
        digits++;
        temp /= 10;
    }
    temp = n;
    while (temp > 0) {
        int remainder = temp % 10;
        sum += pow(remainder, digits);
        temp /= 10;
    }
    return (sum == n);
}

int is_perfect(int n) {
    int i, sum = 0;
    for (i = 1; i < n; i++) {
        if (n % i == 0) {
            sum += i;
        }
    }
    return (sum == n);
}
