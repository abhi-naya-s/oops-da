/*
ABC car showroom sells various types of cars such as Hatchback, Sedan, SUVs, and MUV. 
Due to the year-end sale, the showroom provides a 3%, 5%, 10%, and 15% discount for various car models Hatchback, Sedan, SUV, and MUV respectively. 
Also applies 12% of GST for the total amount of purchase. 
Write a C program to implement the above scenario which will read the type_of_the_car, price_of_the_car and extra-fitting_price_of_the_car as input from the user and estimate the Net amount to be paid to the showroom. 
If the type of car is other than Hatchback, Sedan, SUV, and MUV then display “Invalid Type”. (Difficulty Level: Easy) 
The net amount to be paid to the showroom is estimated as follows:
(For example-if the purchased car is Hatchback) 
Total = price_of_the_car + extra_fitting_price_of_the_car 
Discount = Total * 0.03 // 0.03 denotes 3% wastage
gst = (Total - Discount) * 0.12 // 0.12 denotes 12% GST 
net = Total – Discount + gst 
*/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#define MAX_EMPLOYEES 100
#define MAX_NAME_LENGTH 50
#define MAX_POSITION_LENGTH 50
#define DATE_LENGTH 11
struct Employee {
    char name[MAX_NAME_LENGTH];
    int age;
    char position[MAX_POSITION_LENGTH];
    char date[DATE_LENGTH];
};
int compareByName(const void *a, const void *b) {
    const struct Employee *ea = (const struct Employee *)a;
    const struct Employee *eb = (const struct Employee *)b;
    return strcmp(ea->name, eb->name);
}
int compareByDate(const void *a, const void *b) {
    const struct Employee *ea = (const struct Employee *)a;
    const struct Employee *eb = (const struct Employee *)b;
    return strcmp(ea->date, eb->date);
}
int main() {
    int n, i;
    struct Employee employees[MAX_EMPLOYEES];
    printf("Enter the number of employees: ");
    scanf("%d", &n);
    getchar();
    for (i = 0; i < n; i++) {
        printf("Enter details of employee %d:\n", i+1); printf("Name: ");
        fgets(employees[i].name, MAX_NAME_LENGTH, stdin);
        employees[i].name[strcspn(employees[i].name, "\n")] = '\0'; 
        printf("Age: ");
        scanf("%d", &employees[i].age);
        getchar(); 
        printf("Position: ");
        fgets(employees[i].position, MAX_POSITION_LENGTH, stdin);
        employees[i].position[strcspn(employees[i].position, "\n")] = '\0'; 
        printf("Date of joining (dd/mm/yyyy): ");
        fgets(employees[i].date, DATE_LENGTH, stdin);
        employees[i].date[strcspn(employees[i].date, "\n")] = '\0'; 
    }
    qsort(employees, n, sizeof(struct Employee), compareByName);
    printf("\nEmployee List sorted by name:\n\n");
    for (i = 0; i < n; i++) {
        printf("Name: %s\n", employees[i].name);
        printf("Age: %d\n", employees[i].age);
        printf("Position: %s\n", employees[i].position);
        printf("Date of Joining: %s\n\n", employees[i].date);
    }
    qsort(employees, n, sizeof(struct Employee), compareByDate);
    printf("\nEmployee List sorted by date of joining:\n\n");
    for (i = 0; i < n; i++) {
        printf("Name: %s\n", employees[i].name);
    }
    return 0;
}
